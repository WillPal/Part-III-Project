################################################
############ Early Processing ##################
################################################
### Set desired working directory and load required packages
setwd("C:/Users/Will/Desktop/willp_work/")
library(tidyverse)
library(scran)
library(dtw)
library(edgeR)
library(ggfortify)
library(gplots)
library(RColorBrewer)
library(scales)
library(scran)
library(scater)
library(tidyverse)
library(org.Dr.eg.db)
library(factoextra)
library(NbClust)
library(gplots)
library(RColorBrewer)


##### Early processing of the scRNA-seq data using scran
### sc18hpf indicates scRNA-seq of the zebrafish embryo 18 hours post-fertilisation

sc18hpf <- read.csv(gzfile("GSM3067194_18hpf.csv")) %>%
  column_to_rownames("Row") %>%
  as.matrix()
shared_genes <- read.csv("shared_genes.csv") ### List of the shared genes between
                                             ### scRNA-seq and the three TOMO-seq 
                                             ### datasets
sc18hpf <- sc18hpf[rownames(sc18hpf)%in%shared_genes[,2],]
############################
sce <- SingleCellExperiment(list(counts=sc18hpf))
ensembl <- mapIds(org.Dr.eg.db, keys=rownames(sce), keytype = "SYMBOL",
                  column = "ENSEMBL") #Worked!!
rowData(sce)$ENSEMBL <- ensembl
####################################
##### Quality control
sce <- calculateQCMetrics(sce, feature_controls = NULL)
par(mfrow=c(2,1))
hist(sce$total_counts/1e3, xlab = "Library size (thousands)", main = "",
     breaks = 20, col = "grey80", ylab = "Number of cells")
hist(sce$total_features_by_counts, xlab = "Number of expressed genes", main = "",
     breaks = 20, col = "grey80", ylab = "Number of cells")
libsize.drop <- isOutlier(sce$total_counts, nmads = 2, type = "both",
                          log = TRUE) 
feature.drop <- isOutlier(sce$total_features_by_counts, nmads = 2, type = "both"
                          , log = TRUE) 
sce <- sce[,!(libsize.drop | feature.drop)]
data.frame(ByLibSize = sum(libsize.drop), ByFeature = sum(feature.drop),
           Remaining = ncol(sce))
#################################
##### Examining gene-level metrics
fontsize <- theme(axis.text = element_text(size=12),
                  axis.title = element_text(size=16))
ave.counts <- calcAverage(sce, use_size_factors = FALSE)
hist(log10(ave.counts), breaks = 100, main = "", col = "grey",
     xlab = expression(log[10]~"average count"))
rowData(sce)$ave.count <- ave.counts
to.keep <- ave.counts > 0.01
sce <- sce[to.keep,]
summary(to.keep) 
#####################################
##### Normalization of cell-specific biases
set.seed(1000)
clusters <- quickCluster(sce, min.mean=0.1, method="igraph")
sce <- computeSumFactors(sce, cluster=clusters, min.mean=0.1)
summary(sizeFactors(sce))
plot(sizeFactors(sce), sce$total_counts/1e3, log='xy', ylab = "Library size
     (thousands)", xlab = "Size factor")
sce <- normalize(sce)
#####################################

##### Reading TOMO-seq data, obtained from Junker et al. 2014
### tail2head and head2tail indicates in which direction the tomo-seq was performed
### Geting t2h
t2h <- read.csv("tail2head.csv", header = F)
t2h <- column_to_rownames(t2h, "V1")
t2h <- t2h[,104:1]
colnames(t2h) <- 1:104
### Getting h2t
h2t <- read.csv("head2tail.csv", header = F)
h2t <- column_to_rownames(h2t, "V1")
colnames(h2t) <- 1:108
### Getting t2h2
t2h2 <- read.csv("tail2head2.csv", header = F, stringsAsFactors = F)
t2h2[1,1] <- "ENSDARG00000000002"
t2h2 <- column_to_rownames(t2h2, "V1")
t2h2 <- t2h2[,105:1]
colnames(t2h2) <- 1:105

############# Peforming the high-expression filter
cells <- logcounts(sce)
dim(cells)
cells <- (2^cells) - 1
dim(cells)
a <- c()
for (i in 1:nrow(cells)){
  if (summary(cells[i,])[5] >= 1){
    a <- c(a,i)
  }
}
length(a)
cells <- cells[a,]
dim(cells)
ensembl <- mapIds(org.Dr.eg.db, keys=rownames(cells), keytype = "SYMBOL",
                  column = "ENSEMBL") ### Converting to ENSEMBL names, consistent with
                                      ### Tomo-seq
ensembl2 <- ensembl[!is.na(ensembl)]
cells <- data.frame(ensembl = ensembl2, cells)
cell_gene_list <- rownames(cells)
rownames(cells) <- NULL
cells <- cells[!duplicated(ensembl),] ### Ensuring no genes were duplicatedc
####### Matching the gene names
aligned <- rownames_to_column(t2h, "ensembl") %>% 
  inner_join(rownames_to_column(h2t, "ensembl"), by = "ensembl") %>% 
  inner_join(rownames_to_column(t2h2, "ensembl"), by = "ensembl") %>%
  inner_join(cells, by = "ensembl") %>% 
  column_to_rownames("ensembl")
t2h.2 <- aligned[,1:104]
colnames(t2h.2) <- 1:104
h2t.2 <- aligned[,105:212]
colnames(h2t.2) <- 1:108
t2h2.2 <- aligned[,213:317]
colnames(t2h2.2) <- 1:105
cells.2 <- aligned[,318:ncol(aligned)]
########################################
### Discretising into 100 sections
t2h.disc <- t2h.2
colnames(t2h.disc) <- round(1:104/1.04)
a <- c()
for (i in 1:103){
  if (colnames(t2h.disc)[i] == colnames(t2h.disc)[i+1]){
    a <- c(a,i)
    t2h.disc[i] <- (t2h.disc[i] + t2h.disc[i+1])/2
  }
}
t2h.disc <- t2h.disc[,-a]
h2t.disc <- h2t.2
colnames(h2t.disc) <- round(1:108/1.08)
a <- c()
for (i in 1:107){
  if (colnames(h2t.disc)[i] == colnames(h2t.disc)[i+1]){
    a <- c(a,i)
    h2t.disc[i] <- (h2t.disc[i] + h2t.disc[i+1])/2
  }
}
h2t.disc <- h2t.disc[,-a]
t2h2.disc <- t2h2.2
colnames(t2h2.disc) <- round(1:105/1.05)
a <- c()
for (i in 1:104){
  if (colnames(t2h2.disc)[i] == colnames(t2h2.disc)[i+1]){
    a <- c(a,i)
    t2h2.disc[i] <- (t2h2.disc[i] + t2h2.disc[i+1])/2
  }
}
t2h2.disc <- t2h2.disc[,-a]
###############################################
### Normalising each Tomo-seq section to match the mean average total readcount for
### each section across all the samples
norml <- function(x){
  output = x * (read.sum/sum(x))
  return(output)
}
t2h.adj <- matrix(ncol = 100, nrow = nrow(t2h.disc))
t2h2.adj <- matrix(ncol = 100, nrow = nrow(t2h2.disc))
h2t.adj <- matrix(ncol = 100, nrow = nrow(h2t.disc))
for (i in 1:ncol(t2h.disc)){
  read.sum <- cbind(t2h.disc[,i], h2t.disc[,i], 
                    t2h2.disc[,i])
  read.sum <- mean(apply(read.sum,2,sum))
  t2h.adj[,i] <- norml(t2h.disc[,i])
  h2t.adj[,i] <- norml(h2t.disc[,i])
  t2h2.adj[,i] <- norml(t2h2.disc[,i])
}
dimnames(t2h.adj) <- dimnames(t2h.disc)
dimnames(t2h2.adj) <- dimnames(t2h2.disc)
dimnames(h2t.adj) <- dimnames(h2t.disc)
#############################################
#### Calculating Euclidean distance between genes and removing the most
#### poorly reproducible

t1h1 <- c()
t1t2 <- c()
h1t2 <- c()
for (i in 1:nrow(t2h.adj)){
  t <- rbind(t2h.adj[i,], h2t.adj[i,], t2h2.adj[i,])
  t <- as.matrix(dist(t))
  t1h1 <- c(t1h1, t[1,2])
  t1t2 <- c(t1t2, t[1,3])
  h1t2 <- c(h1t2, t[2,3])
  if (i %% 100 == 0){
    print(i)
  }
}
distance.eucl <- data.frame(gene_no = 1:nrow(t2h.adj), t1h1, t1t2,
                            h1t2)
distance.eucl <- data.frame(distance.eucl,
                            mean = apply(distance.eucl[,2:4],1,mean),
                            max = apply(distance.eucl[,2:4],1,max),
                            min = apply(distance.eucl[,2:4],1,min))
summary(distance.eucl[,5])




lowerq <- distance.eucl %>%
  dplyr::filter(mean <= (summary(distance.eucl[,5])[5])) #3rd quartile of the mean distance
t2h.adj.lowerq <- t2h.adj[lowerq$gene_no,]
h2t.adj.lowerq <- h2t.adj[lowerq$gene_no,]
t2h2.adj.lowerq <- t2h2.adj[lowerq$gene_no,]
######################################
### Combining the three to create an average
tomo_average.eucl <- matrix(ncol = 100, nrow = nrow(t2h.adj.lowerq))
for (i in 1:nrow(t2h.adj.lowerq)){
  tomo_average.eucl[i,] <- (t2h.adj.lowerq[i,]+h2t.adj.lowerq[i,]+
                              t2h2.adj.lowerq[i,])/3
}
dimnames(tomo_average.eucl) <- dimnames(t2h.adj.lowerq)

###### Preparing for SpatialDE
sample_info.eucl <- data.frame(Section = 1:100, 
                               Sum = apply(tomo_average.eucl,2,sum))

write.csv(sample_info.eucl, 
          "Project/Landmark_genes/sample_info.eucl.csv")
write.csv(tomo_average.eucl, 
          "Project/tomo_average.eucl.csv")